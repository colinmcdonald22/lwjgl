import org.apache.tools.ant.taskdefs.condition.Os

def ENV = System.getenv()

def os_arch = getArch(System.getProperty("os.arch"))
def target_arch = ENV.ARCHITECTURE ? getArch(ENV.ARCHITECTURE) : os_arch

def java_home = System.getProperty("java.home")

if (ENV.ARCHITECTURE) {
    if (ENV.ARCHITECTURE == "arm64") {
        java_home = ENV.JAVA_HOME_8_ARM64 + "/jre"
    } else {
        java_home = ENV.JAVA_HOME_8_X64 + "/jre"
    }
}

def javavmroot = java_home + "/.."

def macos_arch = "x86_64"

def macos_target = "10.9"

if (target_arch == "aarch64") {
    macos_arch = "arm64"
    macos_target = "11.0"
}

def developer_path = "/Developer";

try {
    def developer_path_pros = Os.isFamily("mac") ? "xcode-select -print-path".execute() : null

    if (!(developer_path_pros == null || developer_path_pros.exitValue() != 0)) {
        developer_path = developer_path_pros.text.trim()
    }
} catch (ignored) {
    ignored.printStackTrace()
}

if (developer_path == "/Developer" && ENV.ARCHITECTURE) {
    developer_path = (ENV.XCODE_13_DEVELOPER_DIR ? ENV.XCODE_13_DEVELOPER_DIR : (
            ENV.XCODE_14_DEVELOPER_DIR ? ENV.XCODE_14_DEVELOPER_DIR : (
                    ENV.XCODE_15_DEVELOPER_DIR ? ENV.XCODE_15_DEVELOPER_DIR : "/Developer"
            )
    ))
}



def sdk_path = "Platforms/MacOSX.platform/Developer/SDKs"

def sdkroot = "${developer_path}/${sdk_path}/MacOSX.sdk"

def compiler = "clang"

def workdir = file("lwjgl-platform/build/natives")
def workdirX = "${workdir}/${target_arch}"
file(workdirX).mkdirs()

def final_name = "liblwjgl-macos-${target_arch}.dylib"

def temp_name = "liblwjgl-${target_arch}.dylib"

tasks.register("macosx_natives_echo") {
    dependsOn "a-version-mismatch"
    doFirst {
        println("Compiler: ${compiler}" +
                "\nMac OS SDK: ${sdkroot}" +
                "\nMacOS Version Target: ${macos_target}" +
                "\nJava Home/JavaVM.framework: ${javavmroot}" +
                "\nOS arch: ${os_arch}" +
                "\nTarget arch: ${target_arch}"
        )
        mkdir(workdirX)
    }
}

tasks.register("macosx_natives_compile", Exec) {
    dependsOn "macosx_natives_echo"
    workingDir(workdirX)

    doFirst {
        args(
                "-isysroot",
                sdkroot,
                "-arch",
                macos_arch,
                "-mmacosx-version-min=${macos_target}",
                "-ObjC",
                "-O2",
                "-Wall",
                "-Wunused",
                "-c",
                "-fPIC"
        )

        def inputs = [
                "${javavmroot}/include",
                "${javavmroot}/include/darwin",
                getNativeFolder(project,"generated", "."),
                getNativeFolder(project,"common", "common"),
                getNativeFolder(project,"common", "common/opengl"),
                getNativeFolder(project,"macosx", "macosx")
        ]

        inputs.each {args("-I" + it)}

        def folders = project(":lwjgl-platform").sourceSets.common.resources.srcDirs +
                project(":lwjgl-platform").sourceSets.macosx.resources.srcDirs +
                project(":lwjgl-platform").sourceSets.generated.resources.srcDirs

        folders.each {
            if (it.toString().contains("lwjgl-platform/src")) {
                ["common", "common/opengl", "generated/openal",
                 "generated/opencl", "generated/opengl", "macosx"].each {et ->
                    fileTree(it.toString() + "/" + et) {
                        include "*.c", "*.m"
                    }.files.each {args(it.toString())}
                }
            }
        }
    }

    executable(compiler)
}

tasks.register("macosx_natives_symbols", Exec) {
    dependsOn "macosx_natives_compile"
    workingDir(workdir)

    executable("sh")

    args(
            file("platform_build/macosx_ant/build-symbol-list").toString(),
            target_arch
    )

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    doLast {
        file(workdir.toString() + "/lwjgl.symbols").write(standardOutput.toString())
    }
}

tasks.register("macosx_natives_link", Exec) {
    dependsOn "macosx_natives_symbols"

    def jdk_lib = "${java_home}/../Libraries"
    if (file("${java_home}/lib/libjawt.dylib").exists()) {
        jdk_lib = "${java_home}/lib"
    }

    workingDir(workdirX)
    executable(compiler)

    doFirst {
        args(
                "-isysroot",
                sdkroot,
                "-arch",
                macos_arch,
                "-mmacosx-version-min=${macos_target}",
                "-exported_symbols_list",
                "../lwjgl.symbols",
                "-dynamiclib",
                "-o",
                temp_name,
                "-framework",
                "Foundation",
                "-weak_framework",
                "AppKit",
                "-framework",
                "Carbon",
                "-framework",
                "OpenGL",
                "-framework",
                "QuartzCore",
                "-L${jdk_lib}",
                "-ljawt"
        )

        fileTree(workdirX) {
            include "*.o"
        }.files.each {args(it.toString())}
    }
}

tasks.register("macosx_natives_strip", Exec) {
    dependsOn "macosx_natives_link"
    workingDir(workdirX)
    executable("strip")

    doFirst {
        args(
                "-S",
                "-X"
        )

        fileTree(workdirX) {
            include temp_name
        }.files.each {args(it.toString())}
    }
}

tasks.register("macosx_natives_lipo", Exec) {
    dependsOn "macosx_natives_strip"
    workingDir(workdir)
    executable("lipo")

    doFirst {
        args("-create")

        fileTree(workdirX) {
            include temp_name
        }.files.each {args(it.toString())}

        args("-output", final_name)
    }
}

tasks.register("build_natives_macosx") {
    if (!file(workdir.toString() + "/" + final_name).exists()) {
        dependsOn "macosx_natives_lipo"
    }
}
